"""–¢–µ—Å—Ç—ã –¥–ª—è MediaProcessor –∏ MediaProvider Protocol."""

import base64
from unittest.mock import AsyncMock, Mock

import pytest

from src.bot.interfaces import MediaProvider


def test_media_provider_protocol_compliance() -> None:
    """–¢–µ—Å—Ç: MediaProcessor –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å MediaProvider Protocol."""
    from src.bot.media_processor import MediaProcessor

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MediaProcessor —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã Protocol
    processor: MediaProvider = MediaProcessor(whisper_model="base", whisper_device="cpu")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ñ–æ—Ç–æ
    assert hasattr(processor, "download_photo")
    assert hasattr(processor, "photo_to_base64")
    assert callable(processor.download_photo)
    assert callable(processor.photo_to_base64)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –∞—É–¥–∏–æ
    assert hasattr(processor, "download_audio")
    assert hasattr(processor, "transcribe_audio")
    assert callable(processor.download_audio)
    assert callable(processor.transcribe_audio)


def test_photo_to_base64() -> None:
    """–¢–µ—Å—Ç: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ base64 —Å—Ç—Ä–æ–∫—É."""
    from src.bot.media_processor import MediaProcessor

    processor = MediaProcessor(whisper_model="base", whisper_device="cpu")

    # Arrange - —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    test_bytes = b"fake_image_data"

    # Act - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
    result = processor.photo_to_base64(test_bytes)

    # Assert - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –≤ base64
    assert isinstance(result, str)
    assert result == base64.b64encode(test_bytes).decode("utf-8")


@pytest.mark.asyncio
async def test_download_photo() -> None:
    """–¢–µ—Å—Ç: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ aiogram Bot."""
    from src.bot.media_processor import MediaProcessor

    processor = MediaProcessor(whisper_model="base", whisper_device="cpu")

    # Arrange - –º–æ–∫ aiogram Bot
    mock_bot = AsyncMock()
    mock_file = Mock()
    mock_file.file_path = "photos/test_photo.jpg"
    mock_bot.get_file.return_value = mock_file

    # –ú–æ–∫ –¥–ª—è download_file
    test_photo_bytes = b"downloaded_image_data"
    mock_io = Mock()
    mock_io.read.return_value = test_photo_bytes
    mock_bot.download_file.return_value = mock_io

    # Act - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
    result = await processor.download_photo("test_file_id", mock_bot)

    # Assert
    assert result == test_photo_bytes
    mock_bot.get_file.assert_called_once_with("test_file_id")
    mock_bot.download_file.assert_called_once_with("photos/test_photo.jpg")


@pytest.mark.asyncio
async def test_download_photo_error() -> None:
    """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ."""
    from src.bot.media_processor import MediaProcessor

    processor = MediaProcessor(whisper_model="base", whisper_device="cpu")

    # Arrange - –º–æ–∫ Bot —Å –æ—à–∏–±–∫–æ–π
    mock_bot = AsyncMock()
    mock_bot.get_file.side_effect = Exception("Telegram API error")

    # Act & Assert - –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    with pytest.raises(Exception, match="Telegram API error"):
        await processor.download_photo("invalid_file_id", mock_bot)


def test_media_processor_init_whisper() -> None:
    """üî¥ RED: –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MediaProcessor —Å Faster-Whisper."""
    from src.bot.media_processor import MediaProcessor

    # Act - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ Whisper
    processor = MediaProcessor(whisper_model="base", whisper_device="cpu")

    # Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω –∏ –∏–º–µ–µ—Ç whisper –∞—Ç—Ä–∏–±—É—Ç
    assert hasattr(processor, "whisper")
    assert processor.whisper is not None


@pytest.mark.asyncio
async def test_download_audio() -> None:
    """üî¥ RED: –¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ aiogram Bot."""
    from src.bot.media_processor import MediaProcessor

    processor = MediaProcessor(whisper_model="base", whisper_device="cpu")

    # Arrange - –º–æ–∫ aiogram Bot
    mock_bot = AsyncMock()
    mock_file = Mock()
    mock_file.file_path = "voice/test_audio.ogg"
    mock_bot.get_file.return_value = mock_file

    # –ú–æ–∫ –¥–ª—è download_file
    test_audio_bytes = b"downloaded_audio_ogg_data"
    mock_io = Mock()
    mock_io.read.return_value = test_audio_bytes
    mock_bot.download_file.return_value = mock_io

    # Act - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
    result = await processor.download_audio("test_voice_file_id", mock_bot)

    # Assert
    assert result == test_audio_bytes
    mock_bot.get_file.assert_called_once_with("test_voice_file_id")
    mock_bot.download_file.assert_called_once_with("voice/test_audio.ogg")


@pytest.mark.asyncio
async def test_transcribe_audio() -> None:
    """üî¥ RED: –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Faster-Whisper."""
    from unittest.mock import MagicMock, patch

    from src.bot.media_processor import MediaProcessor

    # Arrange - –º–æ–∫–∏—Ä—É–µ–º Faster-Whisper
    with patch("src.bot.media_processor.WhisperModel") as mock_whisper:
        mock_whisper_instance = MagicMock()

        # –ú–æ–∫–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        mock_segment = MagicMock()
        mock_segment.text = "–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        mock_info = MagicMock()
        mock_info.language = "ru"

        mock_whisper_instance.transcribe.return_value = ([mock_segment], mock_info)
        mock_whisper.return_value = mock_whisper_instance

        processor = MediaProcessor(whisper_model="base", whisper_device="cpu")

        # Act - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        test_audio_bytes = b"fake_ogg_audio_data"
        result = await processor.transcribe_audio(test_audio_bytes)

        # Assert
        assert result == "–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        mock_whisper_instance.transcribe.assert_called_once()


@pytest.mark.asyncio
async def test_transcribe_audio_error_handling() -> None:
    """üî¥ RED: –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏."""
    from unittest.mock import MagicMock, patch

    from src.bot.media_processor import MediaProcessor

    # Arrange - –º–æ–∫–∏—Ä—É–µ–º Faster-Whisper —Å –æ—à–∏–±–∫–æ–π
    with patch("src.bot.media_processor.WhisperModel") as mock_whisper:
        mock_whisper_instance = MagicMock()
        mock_whisper_instance.transcribe.side_effect = Exception("Whisper transcription error")
        mock_whisper.return_value = mock_whisper_instance

        processor = MediaProcessor(whisper_model="base", whisper_device="cpu")

        # Act & Assert - –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        test_audio_bytes = b"invalid_audio_data"
        with pytest.raises(Exception, match="Whisper transcription error"):
            await processor.transcribe_audio(test_audio_bytes)
