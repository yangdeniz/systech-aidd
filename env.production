# =============================================================================
# PRODUCTION ENVIRONMENT CONFIGURATION
# =============================================================================
# 
# Этот файл содержит шаблон переменных окружения для production развертывания.
# Перед развертыванием создайте копию этого файла как .env и заполните все значения.
#
# ВАЖНО: НЕ коммитьте файл .env с реальными секретами в Git!
# =============================================================================

# -----------------------------------------------------------------------------
# DATABASE CONFIGURATION
# -----------------------------------------------------------------------------
# URL подключения к PostgreSQL базе данных
# Формат: postgresql+asyncpg://USER:PASSWORD@HOST:PORT/DATABASE
# В Docker Compose HOST = имя сервиса (postgres)
DATABASE_URL=postgresql+asyncpg://homeguru:homeguru_dev@postgres:5432/homeguru

# -----------------------------------------------------------------------------
# COLLECTOR MODE
# -----------------------------------------------------------------------------
# Режим работы коллектора данных
# Значения: 
#   - "mock" - использовать mock данные (для разработки/тестирования)
#   - "real" - использовать реальный API коллектор
COLLECTOR_MODE=real

# -----------------------------------------------------------------------------
# ADMIN USER SEED DATA
# -----------------------------------------------------------------------------
# Данные для создания администратора при первом запуске миграций
# Администратор создается автоматически если не существует
ADMIN_USERNAME=admin
ADMIN_PASSWORD=CHANGE_THIS_STRONG_PASSWORD_IN_PRODUCTION

# -----------------------------------------------------------------------------
# JWT AUTHENTICATION
# -----------------------------------------------------------------------------
# Секретный ключ для подписи JWT токенов
# ВАЖНО: Должен быть случайной строкой минимум 32 символа
# Генерация: python -c "import secrets; print(secrets.token_urlsafe(32))"
JWT_SECRET_KEY=CHANGE_THIS_TO_RANDOM_SECRET_KEY_MIN_32_CHARS

# Срок действия access токена в днях
JWT_ACCESS_TOKEN_EXPIRE_DAYS=30

# -----------------------------------------------------------------------------
# LLM CONFIGURATION (OpenRouter)
# -----------------------------------------------------------------------------
# API ключ для OpenRouter (доступ к LLM моделям)
# Получить можно на: https://openrouter.ai/keys
OPENROUTER_API_KEY=sk-or-v1-YOUR_OPENROUTER_API_KEY_HERE

# Модель LLM для использования
# Рекомендуемые модели:
#   - anthropic/claude-3.5-sonnet (рекомендуется, высокое качество)
#   - anthropic/claude-3-haiku (быстрее, дешевле)
#   - openai/gpt-4-turbo
# Примечание: используются обе переменные для бота и API
OPENROUTER_MODEL=anthropic/claude-3.5-sonnet
LLM_MODEL=anthropic/claude-3.5-sonnet

# -----------------------------------------------------------------------------
# TELEGRAM BOT (Optional)
# -----------------------------------------------------------------------------
# Токен Telegram бота
# Получить можно у @BotFather в Telegram
# Если бот не используется, можно оставить пустым или удалить эту переменную
TELEGRAM_BOT_TOKEN=1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890

# -----------------------------------------------------------------------------
# FRONTEND CONFIGURATION
# -----------------------------------------------------------------------------
# URL для API (используется Next.js frontend)
# В production должен быть публичный адрес сервера
# Формат: http://IP_ADDRESS:PORT или https://domain.com
NEXT_PUBLIC_API_URL=http://92.255.78.249:8003

# =============================================================================
# NOTES:
# =============================================================================
# 
# 1. Все секреты (пароли, токены, ключи) должны быть изменены на уникальные значения
# 2. JWT_SECRET_KEY должен быть криптографически стойкой случайной строкой
# 3. ADMIN_PASSWORD должен быть сильным паролем для production
# 4. Файл .env не должен попадать в Git (добавлен в .gitignore)
# 5. Для генерации случайных секретов используйте:
#    python -c "import secrets; print(secrets.token_urlsafe(32))"
#
# =============================================================================

