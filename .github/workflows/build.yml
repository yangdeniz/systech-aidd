name: Build and Publish Docker Images

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'frontend/app/**'
      - 'Dockerfile.*'
      - 'docker-entrypoint-api.sh'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'migrations/**'
      - 'alembic.ini'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'frontend/app/**'
      - 'Dockerfile.*'
      - 'docker-entrypoint-api.sh'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'migrations/**'
      - 'alembic.ini'

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: bot
            dockerfile: Dockerfile.bot
            context: .
          - service: api
            dockerfile: Dockerfile.api
            context: .
          - service: frontend
            dockerfile: Dockerfile.frontend
            context: ./frontend/app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/homeguru-${{ matrix.service }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-,format=short
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}

