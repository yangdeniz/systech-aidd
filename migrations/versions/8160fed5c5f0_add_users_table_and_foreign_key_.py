"""add users table and foreign key relationship

Revision ID: 8160fed5c5f0
Revises: 5b38e2158d23
Create Date: 2025-10-16 16:46:29.651613

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "8160fed5c5f0"
down_revision: Union[str, Sequence[str], None] = "5b38e2158d23"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Create users table
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("username", sa.String(length=255), nullable=True),
        sa.Column("first_name", sa.String(length=255), nullable=True),
        sa.Column("last_name", sa.String(length=255), nullable=True),
        sa.Column("language_code", sa.String(length=10), nullable=True),
        sa.Column(
            "first_seen",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_seen", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("is_active", sa.Boolean(), server_default="true", nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_telegram_id"), "users", ["telegram_id"], unique=True)

    # Step 2: Backfill users from existing messages
    # Create user records for all distinct user_id values in messages table
    op.execute("""
        INSERT INTO users (telegram_id, username, first_name, last_name, language_code, first_seen, last_seen, is_active)
        SELECT DISTINCT 
            user_id as telegram_id,
            NULL as username,
            NULL as first_name,
            NULL as last_name,
            NULL as language_code,
            MIN(created_at) as first_seen,
            MAX(created_at) as last_seen,
            true as is_active
        FROM messages
        GROUP BY user_id
        ON CONFLICT (telegram_id) DO NOTHING;
    """)

    # Step 3: Add foreign key constraint
    op.create_foreign_key(
        None, "messages", "users", ["user_id"], ["telegram_id"], ondelete="CASCADE"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "messages", type_="foreignkey")
    op.drop_index(op.f("ix_users_telegram_id"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
